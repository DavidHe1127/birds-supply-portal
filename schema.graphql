# Common
directive @isAuthenticated on QUERY | FIELD

directive @hasScope(scope: [String]) on QUERY | FIELD

input addCustomerInput {
  first_name: String
  last_name: String
  email: String
  gender: Gender
}

input addParrotInput {
  name: String
  size: Int
  mass: Int
  distribution: String
  lifespan: Int
  species: Species
  code: String
}

input addProductInput {
  price: Int
  qty: Int
  parrotCode: String
  avatar: String
}

type addProductPayload {
  product: Product
}

input addRequestInput {
  parrot: String
  code: String
  reason: String
}

type addRequestPayload {
  request: Request
}

# Customer
type Customer {
  id: ID!
  first_name: String
  last_name: String
  email: String
  gender: Gender
}

input delCustomerInput {
  _id: ID!
  email: String
}

input delProductInput {
  id: ID!
}

type delProductPayload {
  deletedProductId: String!
}

# Errors for relay to read server errors
type Error {
  id: ID
  message: String
  data: ErrorData
}

type ErrorData {
  type: String
}

enum Gender {
  Female
  Male
}

# Mutation
type Mutation {
  addParrot(input: addParrotInput!): Parrot
  addCustomer(input: addCustomerInput): Customer
  setCustomer(input: setCustomerInput): Customer
  delCustomer(input: delCustomerInput): Customer
  addProduct(input: addProductInput!): addProductPayload
  delProduct(input: delProductInput!): delProductPayload
  setProduct(input: setProductInput!): setProductPayload
  addRequest(input: addRequestInput!): addRequestPayload
  setRequestStatus(input: setRequestStatusInput!): setRequestStatusPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Parrot
type Parrot implements Node {
  id: ID!
  name: String
  size: Int
  mass: Float
  distribution: String
  description: String
  lifespan: Int
  species: Species
  code: String
}

type ParrotConnection {
  pageInfo: PageInfo!

  # a list of edges
  edges: [ParrotEdge]
  count: Int!
}

type ParrotEdge {
  cursor: String
  node: Parrot
}

# Product
type Product implements Node {
  id: ID!
  sku: String
  qty: Int
  price: Int
  avatar: String
  parrot: Parrot
  supplier: Supplier
}

type ProductConnection {
  pageInfo: PageInfo!

  # a list of edges
  edges: [ProductEdge]
  count: Int!
}

type ProductEdge {
  cursor: String
  node: Product
}

# Query
type Query {
  customer(email: String): Customer
  customers: [Customer]
  parrot(id: ID, code: String): Parrot
  parrots(skip: Int, after: String, before: String, first: Int, last: Int): ParrotConnection
  parrotsToProduct(supplierId: ID): ParrotConnection
  ifParrotExist(code: String!): Boolean
  request(id: ID!): Request
  requests(skip: Int, after: String, before: String, first: Int, last: Int, reqId: ID): RequestConnection
  product(id: ID!): Product
  products(skip: Int, after: String, before: String, first: Int, last: Int, supplierId: ID): ProductConnection
  bestSellers(skip: Int, after: String, before: String, first: Int, last: Int, supplierId: ID): ProductConnection
  supplier(id: ID, code: String): Supplier
  suppliers(skip: Int, after: String, before: String, first: Int, last: Int): SupplierConnection
  viewer: User
  errors: [Error]
}

type Request implements Node {
  id: ID!
  parrot: String
  code: String
  reason: String
  status: Status
}

type RequestConnection {
  pageInfo: PageInfo!

  # a list of edges
  edges: [RequestEdge]
  count: Int!
}

type RequestEdge {
  cursor: String
  node: Request
}

input setCustomerInput {
  _id: ID!
  email: String
}

input setProductInput {
  id: ID!
  qty: Int
  price: Int
}

type setProductPayload {
  product: Product
}

input setRequestStatusInput {
  id: ID!
  status: Status
}

type setRequestStatusPayload {
  request: Request
}

enum Species {
  macaws
  conures
  cockatoos
  amazons
}

# Request
enum Status {
  pending
  rejected
  approved
}

# Supplier
type Supplier implements Node {
  id: ID!
  name: String
  address: String
  code: String!
  parrotsConnection(first: Int, after: String, last: Int, before: String): SupplierParrotsConnection
}

type SupplierConnection {
  pageInfo: PageInfo!

  # a list of edges
  edges: [SupplierEdge]
  count: Int!
}

type SupplierEdge {
  cursor: String
  node: Supplier
}

type SupplierParrotsConnection {
  pageInfo: PageInfo!
  edges: [SupplierParrotsEdge]
}

type SupplierParrotsEdge {
  cursor: String
  node: Parrot
}

# User
type User implements Node {
  id: ID!
  products(skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection
  requests(skip: Int, after: String, before: String, first: Int, last: Int): RequestConnection
}

